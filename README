Yutong Chen
yc3993

command line instructions for compiling and running your program:
Test-case 1:
start server: python3 ChatApp.py -s 8888
start client x: python3 ChatApp.py -c x 160.39.198.177 8888 8890
start client y: python3 ChatApp.py -c y 160.39.198.177 8888 8891
start client z: python3 ChatApp.py -c z 160.39.198.177 8888 8892
chat x -> y, y->z, ... , x ->z (All combinations): send x hi / send y hi / send z hi
dereg x
chat y->x: send x hi
chat z->x: send x hi
reg x

Test-case 2:
start server: python3 ChatApp.py -s 8888
start client x: python3 ChatApp.py -c x 160.39.198.177 8888 8890
start client y: python3 ChatApp.py -c y 160.39.198.177 8888 8891
dereg y
server exit
send message x-> y

Test-case 3:
start server: python3 ChatApp.py -s 8888
start client x: python3 ChatApp.py -c x 160.39.198.177 8888 8890
start client y: python3 ChatApp.py -c y 160.39.198.177 8888 8891
start client z: python3 ChatApp.py -c z 160.39.198.177 8888 8892
send_all hi

In this assignment, I started to create two files, client and server, and then designed programs according to functional
requirements. In the Registration section, I used two hash tables to record the user socket information in the user and
the server respectively. In the Chatting part, I set a unique message format in the client and server parts to ensure
the sending and receiving function. In the De-registration and Offline Chat sections, I save the offline information
into the hash table, and send it together with the time after the user goes online. In the groupchat part I use a loop
statement to traverse the entire hash table to send information.

In order to ensure the acceptance of information from other clients and local information at the same time, I designed
three threads, namely, the client's function of listening to other clients and local commands, and the server's function
of accepting commands. It waits for the corresponding part of the server to be locked to ensure that the information
will not be processed by other threads.